#include "Game.h"

void Game::playGame()
{
	setupGame();
	//_view->displayIntro();
	//_view->displayMenu();
<<<<<<< HEAD

	setupRound();	
	for (size_t i = 0; i < 100; i++)
	{
		_cm->moveActualRoundCritters(_currentRound, _grid->getRoad());
	}

}

void Game::critterFinishedRoad(std::shared_ptr<Critter> finishedCritter)
{
	_player->setLife(_player->getLife() - 1);

	if (_player->getLife() == 0)
	{
		_view->displayGameOver(LOST);
	}
}
=======
	
	std::shared_ptr<Critter> c = _cm->createCritter(NORMAL);
	c->setSpeed(10);
	std::list<std::shared_ptr<Critter>> critterList;
	critterList.push_back(c);
	// crittereket fel kell iratni az observerre a játék inicializálásakor
	c->addObserver(this);
>>>>>>> 7107a1da681813e85defdf49aec62111e6c8392b

void Game::setupGame()
{
	// Load map
	// tmp road
	std::vector<std::pair<Position, Position>> tmp;

	Position start1(0, 0); //honnan
	Position dir1(1, 0); //irány

	Position end1(400, 0); //hova
	Position dir2(0, 1);

	Position end2(400,200);
	Position dir3(-1, 0);
<<<<<<< HEAD
	Position end3(0, 50);
	tmp.emplace_back(start1, dir1);
	tmp.emplace_back(end1, dir2);
	tmp.emplace_back(end2, dir3);
	tmp.emplace_back(end3, start1);

	_grid->saveGrid(tmp);
	_grid->setRoad(_grid->loadGrid());
=======

	Position end3(100,200);
	Position dir4(0, 1);

	Position end4(100,500);
	Position dir5(1, 0);

	Position end5(800, 500);
	Position dir6(0, 1);

	Position end6(800, 800);

	p.emplace_back(start1, dir1);
	p.emplace_back(end1, dir2); 
	p.emplace_back(end2, dir3);
	p.emplace_back(end3, dir4);
	p.emplace_back(end4, dir5);
	p.emplace_back(end5, dir6);
	p.emplace_back(end6, start1);

	_view->setUpDisplay(critterList, p);
	// move teszt
	for (size_t i = 0; i < 500; i++)
	{
		c->move(p);
		_view->updateGraphic(critterList);
		std::cout << "x: " << c->getPos().x << " y: " << c->getPos().y << std::endl;
	}
>>>>>>> 7107a1da681813e85defdf49aec62111e6c8392b
}

void Game::setupRound()
{
	_currentRound = 0;
}

void Game::currentRound()
{
}

